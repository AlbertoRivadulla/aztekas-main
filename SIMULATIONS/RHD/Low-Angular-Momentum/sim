#!/bin/bash

if [ -z $1 ]
then
   echo ""
   echo "This script is run as:"
   echo ""
   echo "      $./sim gamma"
   echo ""
   echo "where gamma is the polytropic index."
   echo "If you want a TEST run as:"
   echo ""
   echo "      $./sim gamma test"
   echo ""
   echo "If you want to use Ryu-realistic relativistic EoS:"
   echo ""
   echo "      $./sim Ryu"
   echo "      $./sim Ryu test"
   echo ""
   echo "If you want to use ultra-relativistic EoS:"
   echo ""
   echo "      $./sim Stiff"
   echo "      $./sim Stiff test"
   echo ""
   exit
fi

# Read the value of Gamma (<polytropic index>,Ryu,Stiff)
Gamma=$1
# Create the variable recomp in case we need to recompile,
# by reading the EOS written in the Makefile
recomp=$(awk '/EOS/{{print $3}}' Makefile)

# Perform a number of commands in order to set the Makefile 
# and low-angular.param file to the desired values
if [ $Gamma = 'Ryu' ]
then
   awk '/K =/{$3=sprintf("%.8e",'0.0')};{print}' low-angular.param > temp.param && mv temp.param low-angular.param

   if [ $recomp = 'Ryu' ]
   then
      test
   else
      recomp='Ryu'
      awk '/EOS =/{$3="'${recomp}'"};{print}' Makefile > tempMakefile && mv tempMakefile Makefile
      make
   fi

   awk '/EoS =/{$3="'${recomp}'"};{print}' low-angular.param > temp.param && mv temp.param low-angular.param
elif [ $Gamma = 'Stiff' ]
then
   awk '/K =/{$3=sprintf("%.8e",'1.3333333333')};{print}' low-angular.param > temp.param && mv temp.param low-angular.param

   if [ $recomp = 'Stiff' ]
   then
      test
   else
      recomp='Stiff'
      awk '/EOS =/{$3="'${recomp}'"};{print}' Makefile > tempMakefile && mv tempMakefile Makefile
      make
   fi

   awk '/EoS =/{$3="'${recomp}'"};{print}' low-angular.param > temp.param && mv temp.param low-angular.param
else
   awk '/K =/{$3=sprintf("%.8e",'${Gamma}')};{print}' low-angular.param > temp.param && mv temp.param low-angular.param

   if [ $recomp = 'Ideal' ]
   then
      test
   else
      recomp='Ideal'
      awk '/EOS =/{gsub($3,"'${recomp}'")};{print}' Makefile > tempMakefile && mv tempMakefile Makefile
      make
   fi

   awk '/EoS =/{$3="'${recomp}'"};{print}' low-angular.param > temp.param && mv temp.param low-angular.param
fi

######################
if [ -z $2 ]
then
   T_list='3.022612e-03'
   a_list='0.0'
fi

######################

echo '##########################################'
echo '#### GAMMA' $Gamma
echo '##########################################'
echo ''

if [ $Gamma = 'Ryu' ]
then
   Gamma_Dir=Ryu
elif [ $Gamma = 'Stiff' ]
then
   Gamma_Dir=Stiff
else
   Gamma_Dir=Gamma-${Gamma%.*}p${Gamma##*.}
fi

if [ -e $Gamma_Dir ]
then
   test
else
   echo 'Creating repository' $Gamma_Dir
   mkdir $Gamma_Dir
fi

for a in $a_list
do
   a_end=${a##*.}
   path_a='a0p'$a_end'/'
   touch $Gamma_Dir/results_a0p$a_end.dat
   echo 'racc         T            cs           a            Mdot_Acc     Mdot' >> $Gamma_Dir/results_a0p$a_end.dat
done

touch $Gamma_Dir/results.dat
echo 'racc         T            cs           a            Mdot_Acc     Mdot' >> $Gamma_Dir/results.dat

for T in $T_list
do
   awk '/Temp =/{$3=sprintf("%.8e",'$T')};{print}' low-angular.param > temp.param && mv temp.param low-angular.param
   pathT='./'$Gamma_Dir'/T-'$count'/'
   if [ -e $pathT ]
   then
      echo '#########################################'
      echo ''
      echo 'Gamma =' $Gamma 'and T =' $T
      echo ''
      echo '#########################################'
      echo ''
      test
   else
      mkdir $pathT
      echo 'racc         T            cs           a            R            Mdot' >> $pathT/results_a.dat
   fi

   for a in $a_list
   do
      a_end=${a##*.}
      awk '/Black_Hole_Spin =/{$3="'$a'"};{print}' low-angular.param > temp.param && mv temp.param low-angular.param
      path_a='a0p'$a_end'/'
      path=$pathT$path_a
      awk '/outputdirectory =/{$3="'$path'"};{print}' low-angular.param > temp.param && mv temp.param low-angular.param
      awk '/restart_simulation =/{$3="'0'"};{print}' low-angular.param > temp.param && mv temp.param low-angular.param

      michel=$(./Michel/michel log low-angular.param)
      mv analytic.dat ./Michel
      dens=$(echo $michel | awk '{print $8}')
      vel=$(echo $michel | awk '{print $10}')
      awk '/density_0 =/{$3=sprintf("%.8e",'$dens')};{print}' low-angular.param > temp.param && mv temp.param low-angular.param
      awk '/velocity_0 =/{$3=sprintf("%.8e",'$vel')};{print}' low-angular.param > temp.param && mv temp.param low-angular.param

      final_file=$path'sph_1.dat'
      if [ -e $final_file ]
      then 
         echo 'There already exists' $final_file
         echo ''
      else
         echo '#########################################################'
         echo "Running simulation with"
         echo "   Polytropic index ->       Gamma =" $Gamma 
         echo "   Spin parameter   ->           a =" $a
         echo "   Temperature      ->           T =" $T
         echo ""
         echo $michel | awk '{print $1,$2,$3,$4,$5,$6}'
         echo $michel | awk '{print $7,$8}'
         echo $michel | awk '{print $9,$10}'
         echo '#########################################################'
         echo ""
         
         if [ -e $path ]
         then
            test
         else
            mkdir $path
            mkdir $path"INFO"
            touch $path/INFO/log
         fi
         aztekas-notify low-angular.param | tee $path/INFO/log

         if [ $a = "0.0" ]
         then
            touch $path/parameters.dat
            echo $michel | awk '{print $1,$2,$3,$4,$5,$6}' > $path/parameters.dat 
            echo $michel | awk '{print $7,$8}' >> $path/parameters.dat
            echo $michel | awk '{print $9,$10}' >> $path/parameters.dat
            grep "radius" $path/INFO/log >> $path/parameters.dat
            grep "Temperature" $path/INFO/log >> $path/parameters.dat
            grep "sound" $path/INFO/log >> $path/parameters.dat
            grep "index" $path/INFO/log >> $path/parameters.dat
            grep "Rmax" $path/INFO/log >> $path/parameters.dat
            grep "Rmin" $path/INFO/log >> $path/parameters.dat
            grep "Max time" $path/INFO/log >> $path/parameters.dat
            cp -r ./Michel/ $path/INFO
            cp sim $path/INFO
         fi
         
         if [ "$(grep "Newton" $path/INFO/log)" ]
         then
            echo ""
            echo "Find an error while doing the primitive variable recovery"
            echo "Try reducing the value of the Courant factor in low-angular.param"
            echo ""
            rm $path/INFO/log
            exit 1
         elif [ "$(grep "NaN" $path/INFO/log)" ]
         then
            echo ""
            echo "Find a NaN value during calculation"
            echo "Try reducing the value of the Courant factor in low-angular.param"
            echo ""
            rm $path/INFO/log
            exit 1
         fi

         tail -n 1 $Gamma_Dir/results.dat >> $Gamma_Dir/results_a0p$a_end.dat

         rm $path/INFO/log
      fi
   done

   cp $pathT/results_a.dat $Gamma_Dir/results_T-$count.dat

done

# We will only need the decimals in order to name the repositories, so
# we obtain that by doing ${list:2}, this removes from the list the 
# first two characters of each number '0.'
