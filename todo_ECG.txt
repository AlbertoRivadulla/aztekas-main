################################################################################
    DONE
################################################################################

/* I CHANGED THIS!
    - Create a directory for the metric in 
        /Src/physics/RHD/Schwarzschild-ECG
    - Add this option in the Makefile
        /Src/physics/RHD/Makefile
    I did this as 
        ifeq ($(METRIC),Schwarzschild-ECG)
            PARAM += -DMETRIC=SCHW_ECG
        endif
    - Created a new value for the macro METRIC, SCHW_ECG = 6, in the file
        /Src/include/macros
    I modified also the file 
        /Src/common/messages.c
    to print messages for the ECG metric.
*/

- Create a new simulation in 
    /SIMULATIONS/RHD/Wind-Schwarzschild-ECG
    - In the Makefile of the simulation, choose the metric and the coordinates (spherical)
- Find where the macro METRIC is checked in the code, and make it work for the ECG metric.
    - It is checked only in the Makefile 
        /Src/physics/RHD/Makefile
      This simply tells the compiler to compile the correct metric.c

- Define the metric of ECG in 
    /SIMULATIONS/RHD/Wind-Schwarzschild-ECG/user_metric.c

- Plotting
    - I changed the script plot_2D.py in the Wind-Schwarzschild-ECG directory so 
      that the quiver and stream plots are symmetric.
    - I modified the file 
        Src/common/output.c
      so it also outputs to the file sqrt(f(r)) at each position in the space.
      This allows me to plot the velocities accurately with the script
        Graphics/plot_2D.py
      which I also modified, so it multiplies the radial component of the velocity
      by this sqrt(f(r))
    - In order to plot the velocities:
        - In the output of the C code, write also the value of f(r) at each point. 
          This is used to scale the radial velocity when plotting it in the Python script.


################################################################################
    IMPROVEMENTS TO DO
################################################################################

- Option for the interpolating polynomials to be of higher order.
  I should change the functions for f(r) and f(r), but also Read_Interpolation_f_Metric.

- Define the metric of ECG in
    /Src/physics/RHD/Schwarzschild-ECG
  so it can be used by other simulations.

- De-allocate the memory used for the interpolation of f(r).


################################################################################
    TO DO
################################################################################

- .param files for different values of epsilon:
    0.1, 1, 10, 100 (and maybe more)
  In each case, x1min (the minimum value of the coordinate r) should change with 
  the 
    - Do this for different values of v_oo in each case (?)
- Compute the accretion rate from the numerical results in each case.
- Compute the compression ratio.


################################################################################
    NOTES ON THE CODE
################################################################################

- The mesh has values of the coordinates in the system given (not always cartesian).
If the coordinate system is SPHERICAL, the coordinate x2 is multiplied by PI, and if
it is CYLINDRICAL or SPHERICAL the coordinate x3 is multiplied by PI.
    This happens in the function Default_Parameters, in the file 
        Src/common/input.c
- The parameter gc (number of ghost cells) is defined as a preprocessor macro in
    Src/Makefile
- Output file:
    - The first few lines are information on the domain and time of the current frame
    - The following columns are the values in the grid of:
        DIM = 2: x1, x2, density, pressure (?), v_x, v_y

- In order to generate the plots and video, I copy the scripts frames and video_maker 
  in the directory where the output files are placed.


################################################################################
    QUESTIONS ABOUT THE CODE
################################################################################

- In plot_2D.py:
    - In the spherical and cylindrical case, I think the labels are not correct,
    since the meshgrid is cartesian (although the original coordinates are angular and radial).

- How do I compute the compression ratio?

- Where does the horizon radius enter the computations?


################################################################################
    NOTES ON COMPILATION AND EXECUTION
################################################################################

- Run `bear -- make` inside the simulation folder to create the compile_commands.json
file, so the coc.nvim plugin knows where to find the definitions of the different functions.

